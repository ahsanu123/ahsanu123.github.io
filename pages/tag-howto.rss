<?xml version="1.0" encoding="utf-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Ah Blog</title><link>https://ahsanu123.github.io/</link><description>Electronic Engineer</description><pubDate>Thu, 30 Jan 2025 00:00:00 GMT</pubDate><lastBuildDate>Thu, 30 Jan 2025 09:56:17 GMT</lastBuildDate><generator>marmite</generator><item><title>Passing Object From .ASCX in ASPNET Webform.</title><link>https://ahsanu123.github.io//passing-object-from-ascx-in-aspnet-webform.html</link><category>linux</category><category>howto</category><category>ASPNET</category><category>legacy</category><guid>https://ahsanu123.github.io//passing-object-from-ascx-in-aspnet-webform.html</guid><pubDate>Thu, 30 Jan 2025 00:00:00 GMT</pubDate><source url="https://ahsanu123.github.io/">tag-howto</source><content:encoded><![CDATA[<blockquote>
<p><strong>copied from DeepSeek Answer</strong></p>
</blockquote>
<h1><a href="#steps-to-pass-an-object-from-ascx-file" aria-hidden="true" class="anchor" id="steps-to-pass-an-object-from-ascx-file"></a>Steps to Pass an Object from .ascx File</h1>
<h3><a href="#1-define-a-public-property-in-the-user-control" aria-hidden="true" class="anchor" id="1-define-a-public-property-in-the-user-control"></a>1. Define a Public Property in the User Control</h3>
<p>In the code-behind file of your User Control (e.g., MyUserControl.ascx.cs), define a public property that will hold the object.</p>
<pre><code class="language-c#">public partial class MyUserControl : System.Web.UI.UserControl
{
    // Public property to hold the object
    public MyCustomObject MyObject { get; set; }

    protected void Page_Load(object sender, EventArgs e)
    {
        if (MyObject != null)
        {
            // Use the object in your logic
            Label1.Text = MyObject.SomeProperty;
        }
    }
}
</code></pre>
<h3><a href="#2-define-the-object-in-the-parent-page" aria-hidden="true" class="anchor" id="2-define-the-object-in-the-parent-page"></a>2. Define the Object in the Parent Page</h3>
<p>In the parent page (e.g., Default.aspx), you can declare the object and pass it to the User Control declaratively.</p>
<p>Example of MyCustomObject Class:</p>
<pre><code class="language-c#">public class MyCustomObject
{
    public string SomeProperty { get; set; }
}
</code></pre>
<h3><a href="#3-pass-the-object-declaratively-in-ascx" aria-hidden="true" class="anchor" id="3-pass-the-object-declaratively-in-ascx"></a>3. Pass the Object Declaratively in .ascx</h3>
<p>In the .aspx file where you use the User Control, you can set the property declaratively. However, since you cannot directly declare an object in the markup, you can use a static method or a factory method to create the object and assign it to the property.</p>
<p>Example:</p>
<pre><code class="language-html">&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;true&quot; CodeBehind=&quot;Default.aspx.cs&quot; Inherits=&quot;WebApplication1.Default&quot; %&gt;
&lt;%@ Register Src=&quot;~/MyUserControl.ascx&quot; TagName=&quot;MyUserControl&quot; TagPrefix=&quot;uc1&quot; %&gt;
&lt;%@ Import Namespace=&quot;WebApplication1&quot; %&gt;

&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;
&lt;head runat=&quot;server&quot;&gt;
    &lt;title&gt;Pass Object to User Control&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;
        &lt;div&gt;
            &lt;uc1:MyUserControl ID=&quot;MyUserControl1&quot; runat=&quot;server&quot; 
                MyObject='&lt;%# new MyCustomObject { SomeProperty = &quot;Hello from .ascx!&quot; } %&gt;' /&gt;
        &lt;/div&gt;
    &lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<h3><a href="#4-bind-the-property-using-data-binding" aria-hidden="true" class="anchor" id="4-bind-the-property-using-data-binding"></a>4. Bind the Property Using Data Binding</h3>
<p>In the example above, the MyObject property is set using &lt;%# %&gt; data binding syntax. To ensure the binding is evaluated, you need to call the DataBind() method in the Page_Load event of the parent page.</p>
<p>Parent Page Code-Behind (Default.aspx.cs):</p>
<pre><code class="language-c#">protected void Page_Load(object sender, EventArgs e)
{
    if (!IsPostBack)
    {
        // Ensure data binding is evaluated
        DataBind();
    }
}
</code></pre>
<p>Explanation of the Code</p>
<p>Public Property: The MyObject property is defined in the User Control's code-behind.</p>
<p>Declarative Assignment: The MyObject property is set in the .aspx file using &lt;%# %&gt; data binding syntax.</p>
<p>Data Binding: The DataBind() method is called in the parent page's Page_Load event to ensure the data binding expression is evaluated.</p>
<p>Alternative: Use a Static Method
If you want to avoid data binding, you can use a static method to create the object and assign it to the property.</p>
<p>Static Method Example:</p>
<pre><code class="language-c#">public static class ObjectFactory
{
    public static MyCustomObject CreateObject()
    {
        return new MyCustomObject { SomeProperty = &quot;Hello from Static Method!&quot; };
    }
}
</code></pre>
<p>In .aspx File:</p>
<pre><code class="language-html">&lt;uc1:MyUserControl ID=&quot;MyUserControl1&quot; runat=&quot;server&quot; 
    MyObject='&lt;%= ObjectFactory.CreateObject() %&gt;' /&gt;
</code></pre>
<h3><a href="#key-points" aria-hidden="true" class="anchor" id="key-points"></a>Key Points</h3>
<ul>
<li>
<p>You cannot directly declare an object in the .aspx or .ascx markup. Instead, you use data binding (&lt;%# %&gt;) or static methods (&lt;%= %&gt;) to create and assign the object.</p>
</li>
<li>
<p>Ensure you call DataBind() in the parent page if you use data binding (&lt;%# %&gt;).</p>
</li>
<li>
<p>This approach works for User Controls and can be adapted for Custom Server Controls as well.</p>
</li>
</ul>
<p>If you have further questions or need clarification, feel free to ask! üòä</p>
]]></content:encoded></item><item><title>Deploying Marmite Site To Github Pages With Github Action</title><link>https://ahsanu123.github.io//deploying-marmite-site-to-github-pages-with-github-action.html</link><category>linux</category><category>howto</category><category>deployment</category><guid>https://ahsanu123.github.io//deploying-marmite-site-to-github-pages-with-github-action.html</guid><pubDate>Sun, 26 Jan 2025 00:00:00 GMT</pubDate><source url="https://ahsanu123.github.io/">tag-howto</source><content:encoded><![CDATA[<h1><a href="#-introduction" aria-hidden="true" class="anchor" id="-introduction"></a>üí§ Introduction</h1>
<p><a href="https://rochacbruno.github.io/marmite/hosting.html">on marmite documentation page</a>, the author already  explain how to
deploy generated marmite's site into github pages, but the guide is
using <code>cargo</code> to install marmite, which mean cargo will compile it
with github action, its ok, but taking longer than method we will using.</p>
<h2><a href="#-steps" aria-hidden="true" class="anchor" id="-steps"></a>üêú Steps</h2>
<p>this github action file is copied from the jekyll action. basically we will  use
compiled release from Marmite <a href="https://github.com/rochacbruno/marmite/releases/tag/0.2.3">github repo</a>
we download it use <code>wget</code>, then extract it with <code>tar</code>, then running to build our site, and done!!.</p>
<ul>
<li>first make folder <code>.github/workflows</code> inside your Marmite root folder, <code>mkdir -p .github/workflows</code></li>
<li>change directory into new created folder, <code>cd .github/workflows</code></li>
<li>then make yaml file to describe our github action, <code>touch main.yml</code></li>
<li>open with your favorite text editor(I  will use vim), <code>vim main.yml</code></li>
<li>paste code below</li>
</ul>
<pre><code class="language-yaml">name: Marmite Github Page Deployment Action

on:
  push:
    branches: [main]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: &quot;pages&quot;
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout üõé
        uses: actions/checkout@v4

      - name: Download Marmite from Marmite Repos
        run: wget https://github.com/rochacbruno/marmite/releases/download/0.2.3/marmite-0.2.3-x86_64-unknown-linux-gnu.tar.gz

      - name: Extract Marmite with tar
        run: tar -xf marmite-0.2.3-x86_64-unknown-linux-gnu.tar.gz

      - name: Build site üèóÔ∏è
        run: ./marmite . site --debug

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'site'

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
</code></pre>
<ul>
<li>
<p>as time of writing latest marmite version was <code>0.2.3</code>, feel free to change into latest version if there are available.</p>
</li>
<li>
<p>save <code>main.yml</code> file</p>
</li>
<li>
<p>then push into your remote main branch</p>
</li>
<li>
<p>then check if your command running on action tab inside your github repository.</p>
</li>
</ul>
<h2><a href="#-references" aria-hidden="true" class="anchor" id="-references"></a>üçÉ References</h2>
<ul>
<li><a href="https://github.com/actions/jekyll-build-pages">Jekyll Github Action</a></li>
<li><a href="https://rochacbruno.github.io/marmite/hosting.html">Official Marmite Hosting Guide</a></li>
</ul>
]]></content:encoded></item><item><title>archlinux wayland installation on raspberry pi zero 2</title><link>https://ahsanu123.github.io//archlinux-wayland-installation-on-raspberry-pi-zero-2.html</link><category>linux</category><category>howto</category><category>installation</category><guid>https://ahsanu123.github.io//archlinux-wayland-installation-on-raspberry-pi-zero-2.html</guid><pubDate>Tue, 21 Jan 2025 00:00:00 GMT</pubDate><source url="https://ahsanu123.github.io/">tag-howto</source><content:encoded><![CDATA[<h1><a href="#-introduction" aria-hidden="true" class="anchor" id="-introduction"></a>üêß Introduction</h1>
<p><a href="#installation-step">(skip intro if you want, its not important)</a></p>
<p>I have a raspberry pi zero 2 w (let's call it zero 2 after this),
but I never use it, recently I got a plan to run a local web app on my pi zero 2,
so I try find lightest linux distro, I have several experience on archlinux with
XWindow(xorg), so I try to install it on my zero 2, but sadly it doesn't
work for unknown reason, I try to investigate it for a week, but no luck.</p>
<p>Then I try to install raspios lite, its work, with <a href="https://wayfire.org/">wayfire</a> on <a href="https://wayland.freedesktop.org/">wayland</a>. although it work, the os is too slow to run browser.</p>
<p>So I take another change to re-install archlinux with wayland, and luckly its worked,
and here is my documentation to install it.</p>
<blockquote>
<h2><a href="#Ô∏è-disclaimer" aria-hidden="true" class="anchor" id="Ô∏è-disclaimer"></a>‚ö†Ô∏è Disclaimer</h2>
<p>I am not professional about linux, so use this text at your own risk.</p>
</blockquote>
<hr />
<h1><a href="#installation-step" aria-hidden="true" class="anchor" id="installation-step"></a>Installation Step</h1>
<blockquote>
<p>üíø Booting zero 2 with archlinuxarm os</p>
</blockquote>
<p>most of this part was copied from <a href="https://archlinuxarm.org/platforms/armv8/broadcom/raspberry-pi-zero-2">official archlinuxarm installation guide</a>, and assume you work on linux for this installation.</p>
<ul>
<li>firstly prepare your sdcard, then insert with card reader into you pc</li>
<li>next try to list your sdcard with <code>sudo ls /dev/sd*</code>, output command will look something like this</li>
</ul>
<pre><code class="language-shell">$ ls /dev/sd*
/dev/sda  /dev/sdb  
</code></pre>
<ul>
<li>you will find several device, make sure you choose correct device <strong>sdb</strong> in this case</li>
<li>next replace all <strong>X</strong> with your device (<strong>b</strong> in this case)</li>
<li>Start fdisk to partition the SD card</li>
</ul>
<pre><code class="language-shell">fdisk /dev/sdX
</code></pre>
<ul>
<li>
<p>At the fdisk prompt, delete old partitions and create a new one:</p>
<ul>
<li>Type o. This will clear out any partitions on the drive.</li>
<li>Type p to list partitions. There should be no partitions left.</li>
<li>Type n, then p for primary, 1 for the first partition on the drive, press ENTER to accept the default first sector, then type +200M for the last sector.</li>
<li>Type t, then c to set the first partition to type W95 FAT32 (LBA).</li>
<li>Type n, then p for primary, 2 for the second partition on the drive, and then press ENTER twice to accept the default first and last sector.</li>
<li>Write the partition table and exit by typing w.</li>
</ul>
</li>
<li>
<p>Create and mount the FAT filesystem:</p>
</li>
</ul>
<pre><code class="language-shell">mkfs.vfat /dev/sdX1
mkdir boot
mount /dev/sdX1 boot
</code></pre>
<ul>
<li>Create and mount the ext4 filesystem:</li>
</ul>
<pre><code class="language-shell">mkfs.ext4 /dev/sdX2
mkdir root
mount /dev/sdX2 root
</code></pre>
<ul>
<li>Download and extract the root filesystem (as root, not via sudo):</li>
</ul>
<pre><code class="language-shell">wget http://os.archlinuxarm.org/os/ArchLinuxARM-rpi-armv7-latest.tar.gz
bsdtar -xpf ArchLinuxARM-rpi-armv7-latest.tar.gz -C root
sync
</code></pre>
<ul>
<li>Move boot files to the first partition:</li>
</ul>
<pre><code class="language-shell">mv root/boot/* boot
</code></pre>
<ul>
<li>Unmount the two partitions:</li>
</ul>
<pre><code class="language-shell">umount boot root
</code></pre>
<ul>
<li>
<p>Insert the SD card into the Raspberry Pi and apply 5V power.</p>
</li>
<li>
<p>Use the serial console or attach HDMI and a keyboard</p>
<ul>
<li>login as root with username <code>root</code> and password is <code>root</code></li>
</ul>
</li>
<li>
<p>connect to network (internet)</p>
</li>
<li>
<p>there is many way to connect into network, we will use <code>wpa_supplicant</code></p>
<ul>
<li>first generate config with <code>wpa_passphrase &lt;your-wifi-name&gt; &lt;your-wifi-password&gt; &gt; homenetwork.conf</code>, ex: <code>wpa_passphrase homenetwork 1234567890 &gt; homenetwork.conf</code></li>
<li>then try to connect with <code>wpa_supplicant -i wlan0 -c homenetwork.conf</code>, <code>-i</code> is for interface (might be different, mine is <strong>wlan0</strong>), and <code>-c</code> is for config.</li>
<li>try to ping <code>ping 1.1.1.1</code>, make sure you got a response</li>
</ul>
</li>
<li>
<p>Initialize the pacman keyring and populate the Arch Linux ARM package signing keys:</p>
</li>
</ul>
<pre><code class="language-shell">pacman-key --init
pacman-key --populate archlinuxarm
</code></pre>
<ul>
<li>
<p>next install several package to run wayland</p>
<ul>
<li><code>pacman -Syu base-devel sudo --noconfirm</code>, update and install base development package, sudo</li>
<li><code>pacman -S wayland xorg --needed --noconfirm</code> install wayland and xorg (at the time wayland is not complete yet, and most of app was based on xorg, so there still need xorg to work)</li>
<li><code>pacman -S sway alacritty vim less --noconfirm</code> install <em>sway</em> window manager (compositor), and alacritty for terminal emulator</li>
</ul>
</li>
<li>
<p>after installation complete, give default <code>alarm</code> user to sudo.</p>
<ul>
<li>run <code>visudo</code>, then uncomment <code>%wheel ALL=(ALL:ALL) ALL</code>, its about line 125</li>
<li>type <code>:wq</code> then enter, to save and exit</li>
</ul>
</li>
<li>
<p>next copy sway config into home <code>.config</code> directory, <code>cd ~ &amp;&amp; cp /etc/sway/config .</code></p>
</li>
<li>
<p>next change default terminal to use alacritty, <code>vim ~/.config/sway/config</code></p>
<ul>
<li>change <code>$term</code> variable to alacritty, from <code>set $term foot</code> to <code>set $term alacritty</code></li>
<li>save and exit, type <code>:wq</code> then enter</li>
</ul>
</li>
<li>
<p>then re-login to user <code>alarm</code></p>
</li>
<li>
<p>inside terminal with <code>alarm</code> user, run sway <code>sway</code>.</p>
</li>
</ul>
<h2><a href="#inside-sway" aria-hidden="true" class="anchor" id="inside-sway"></a>Inside Sway</h2>
<p>by default you can run terminal by hit <code>mod + Enter</code> (mod is <em>windows</em> key if you in windows).
you can read other shortcut key on <code>~/.config/sway/config</code>, to ease of reading config you can run <code>cat ~/.config/sway/config | less</code></p>
<h2><a href="#troubleshooting" aria-hidden="true" class="anchor" id="troubleshooting"></a>Troubleshooting</h2>
<p>if something error when you run <code>sway</code>, install below then try to restart by <code>sudo reboot now</code>.</p>
<ul>
<li>try to install <em>glib2</em>, <code>sudo pacman -S glib2 --noconfirm</code></li>
</ul>
<h2><a href="#reference" aria-hidden="true" class="anchor" id="reference"></a>Reference</h2>
<ul>
<li><a href="https://archlinuxarm.org/platforms/armv8/broadcom/raspberry-pi-zero-2">official archlinuxarm installation guide</a></li>
</ul>
]]></content:encoded></item></channel></rss>